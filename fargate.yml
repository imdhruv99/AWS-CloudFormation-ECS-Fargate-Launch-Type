AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Script for Farget'

Parameters:
  fargateCIDRBlock:
    Description: CIDR Block Type For VPC
    Type: "String"
    Default: "10.0.0.0/26"
  Public1CIDRBlock:
    Description: CIDR Block for Public1
    Type: "String"
    Default: "10.0.0.0/28"
  Public2CIDRBlock:
    Description: CIDR Block for Public2
    Type: "String"
    Default: "10.0.0.16/28"
  AzonePub1:
    Description: Azone For Public Subnet 1
    Type:  "AWS::EC2::AvailabilityZone::Name"
  AzonePub2:
    Description: Azone for Public Subnet 2
    Type: "AWS::EC2::AvailabilityZone::Name"

Resources:
  fargateVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref fargateVPC
      AvailabilityZone: !Ref AzonePub1
      CidrBlock: !Ref Public1CIDRBlock
      MapPublicIpOnLaunch: true

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref fargateVPC
      AvailabilityZone: !Ref AzonePub2
      CidrBlock: !Ref Public2CIDRBlock
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref fargateVPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref fargateVPC

  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - "ecr:DescribeRepositories"
                - "ecr:GetRepositoryPolicy"
                - "ecr:ListImages"
                - "ecs:CreateCluster"
                - "ecs:DeregisterContainerInstance"
                - "ecs:DiscoverPollEndpoint"
                - "ecs:Poll"
                - "ecs:RegisterContainerInstance"
                - "ecs:StartTask"
                - "ecs:StartTelemetrySession"
                - "ecs:SubmitContainerStateChange"
                - "ecs:SubmitTaskStateChange"
              Resource: '*'
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'FargateCluster'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: fargateLoadBalancer
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !Ref fargateVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !Ref fargateVPC
      Protocol: 'HTTP'
      Port: '80'  

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup      
    Properties:
     VpcId: !Ref fargateVPC
     GroupDescription: for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: tcp
         FromPort: 11111
         ToPort: 11111

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: web-app
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: hello
          Image: ankitshahsoftvan/ecs:1.0.0
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 11111
              Protocol: tcp
          
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: Fargate
      TaskDefinition: !Ref Task
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: hello
          ContainerPort: 11111
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Fargate-tg
      VpcId: !Ref fargateVPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /stat
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
       

Outputs:

  VPC:
    Description: VPC
    Value: !Ref fargateVPC
    Export:
      Name: 'VPC'

  Subnet1:
    Description: 'Subnet 1 on AZ1'
    Value: !Ref Subnet1
    Export:
      Name: 'Subnet1'

  Subnet2:
    Description: 'Subnet 2 on AZ2'
    Value: !Ref Subnet2
    Export:
      Name: 'Subnet2'

  ECSTaskExecutionRole:
    Description: ECS Task Execution Role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: 'ECSTaskExecutionRole'    

  Cluster:
    Value: !Ref ECSCluster
    Export:
      Name: 'ECSCluster'

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name: 'Listener'

  ContainerSecurityGroup:
    Description: container security group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: 'ContainerSecurityGroup'

  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 'DomainName'
  